""""""""""""""""""""""""""""""""""""""""""
"set encoding                            "
""""""""""""""""""""""""""""""""""""""""""
set encoding=utf8
""""""""""""""""""""""""""""""""""""""""""
"let vim different from vi               "
""""""""""""""""""""""""""""""""""""""""""
set nocompatible  
""""""""""""""""""""""""""""""""""""""""""
"set vundle                              "
""""""""""""""""""""""""""""""""""""""""""
call plug#begin()
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" Make sure you use single quotes

Plug 'Yggdroot/indentLine'
Plug 'tomasr/molokai'
Plug 'scrooloose/nerdcommenter'
Plug 'preservim/nerdtree'
Plug 'vim-syntastic/syntastic'
Plug 'ervandew/supertab'
Plug 'majutsushi/tagbar'
Plug 'sirver/ultisnips'
Plug 'mbbill/undotree'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'ryanoasis/vim-devicons'
Plug 'junegunn/vim-easy-align'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'ludovicchabant/vim-gutentags'
Plug 'adelarsq/vim-matchit'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'tpope/vim-repeat'
Plug 'honza/vim-snippets'
Plug 'tpope/vim-surround'
Plug 'lervag/vimtex'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-unimpaired'
Plug 'mg979/vim-visual-multi', {'branch': 'master'}
Plug 'Valloric/YouCompleteMe'
Plug 'rhysd/conflict-marker.vim'
Plug 'ctrlpvim/ctrlp.vim'


" Initialize plugin system
" - Automatically executes `filetype plugin indent on` and `syntax enable`.
call plug#end()
" You can revert the settings after the call like so:
"   filetype indent off   " Disable file-type-specific indentation
"   syntax off            " Disable syntax highlighting

""""""""""""""""""""""""""""""""""""""""""
"set color                               "
""""""""""""""""""""""""""""""""""""""""""
set t_Co=256

set background=dark
colorscheme molokai
hi Normal ctermfg=white ctermbg=NONE
hi NonText ctermbg=NONE 
hi LineNr ctermbg=NONE 
hi FoldColumn ctermbg=NONE 
set cursorline
set cursorcolumn
set hlsearch
hi CursorLine ctermbg=236
hi CursorColumn ctermbg=236
hi Search cterm=reverse ctermbg=none ctermfg=none 

""""""""""""""""""""""""""""""""""""""""""
"set form                                "
""""""""""""""""""""""""""""""""""""""""""
set number
set relativenumber
set ruler
""""""""""""""""""""""""""""""""""""""""""
"for search                              "
""""""""""""""""""""""""""""""""""""""""""
set ignorecase
set smartcase
set incsearch
""""""""""""""""""""""""""""""""""""""""""
"for smart indent                        "
""""""""""""""""""""""""""""""""""""""""""
set cindent
""""""""""""""""""""""""""""""""""""""""""
"for tab                                 "
""""""""""""""""""""""""""""""""""""""""""
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set smarttab
autocmd FileType python setlocal tabstop=4
""""""""""""""""""""""""""""""""""""""""""
"for undo                                "
""""""""""""""""""""""""""""""""""""""""""
set undofile 
set undodir=~/.vim/undodir
""""""""""""""""""""""""""""""""""""""""""
"for spell check                         "
""""""""""""""""""""""""""""""""""""""""""
"set spell
set spelllang=en
set spellfile=~/Setting/en.utf-8.add
""""""""""""""""""""""""""""""""""""""""""
"for disable bell                        "
""""""""""""""""""""""""""""""""""""""""""
set noerrorbells visualbell t_vb=
""""""""""""""""""""""""""""""""""""""""""
"for wildmenu                            "
""""""""""""""""""""""""""""""""""""""""""
set wildmenu
set wildmode=longest:full,full
""""""""""""""""""""""""""""""""""""""""""
"other setting                           "
""""""""""""""""""""""""""""""""""""""""""
set confirm
set backspace=indent,eol,start

set history=500

set showcmd
set showmode
set wrap
set mouse=a
set clipboard=unnamedplus
set noeb
""""""""""""""""""""""""""""""""""""""""""
"search in visual mode                   "
""""""""""""""""""""""""""""""""""""""""""
vnoremap // y/\V<C-r>=escape(@",'/\')<CR><CR>
""""""""""""""""""""""""""""""""""""""""""
"Control c                               "
""""""""""""""""""""""""""""""""""""""""""
map <F2> : silent call SwitchFullSimpleMode()<CR>
map! <F2> <Esc>:call SwitchFullSimpleMode()<CR>
function SwitchFullSimpleMode()
	if (&mouse == "a")
    NERDTreeTabsClose
		let &mouse = ""
		set nocindent
		set nonumber norelativenumber
		set wrap
    set paste
		echo "Switch to simple mode.(nomouse, nonumber, nocindent, wrap, paste, NERDTreeTabsClose)"
	else
    "NERDTreeTabsOpen
		let &mouse = "a"
		set cindent
		set number relativenumber
		set wrap
    set nopaste
		echo "Switch to full mode.(mouse, number, cindent, wrap, nopaste)"
	endif
endfunction
""""""""""""""""""""""""""""""""""""""""""
"movement in line                        "
""""""""""""""""""""""""""""""""""""""""""
noremap k gk
noremap j gj
noremap gk k
noremap gj j
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>
""""""""""""""""""""""""""""""""""""""""""
"widows navigation                       "
""""""""""""""""""""""""""""""""""""""""""
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
" maximize vertical direction window
nnoremap _ <C-w>_
" maximize horizontal direction window
nnoremap \| <C-w>\|
" equalize both horizontal vertical direction window
nnoremap = <C-w>=
" increase/ decrease vertical direction window
nnoremap + <C-W>+
nnoremap - <C-W>-
" increase/ decrease horizontal direction window
nnoremap ( <C-w><
nnoremap ) <C-w>>
set splitbelow
set splitright
""""""""""""""""""""""""""""""""""""""""""
" Tab control                            "
""""""""""""""""""""""""""""""""""""""""""
nnoremap <C-n> gt
nnoremap <C-p> gT
noremap <F4> : call CloseTab()<cr>
noremap <F5> :-tabmove<cr>
noremap <F6> :+tabmove<cr>
function CloseTab()
	if (tabpagenr("$") == 1)
    qa
	else
    tabclose
	endif
endfunction

autocmd BufEnter * call CheckLeftBuffers()
function! CheckLeftBuffers()
  let i = 1
  while i <= winnr('$')
    if getbufvar(winbufnr(i), '&buftype') == 'help' ||
        \ getbufvar(winbufnr(i), '&buftype') == 'quickfix' ||
        \ exists('t:NERDTreeBufName') &&
        \   bufname(winbufnr(i)) == t:NERDTreeBufName ||
        \ bufname(winbufnr(i)) == '__Tag_List__'
      let i += 1
    else
      break
    endif
  endwhile
  if i == winnr('$') + 1
    if tabpagenr('$') == 1
      qall
    else
      tabclose
    endif
  endif
  unlet i
endfunction
""""""""""""""""""""""""""""""""""""""""""
"set for foldmethod                      "
""""""""""""""""""""""""""""""""""""""""""
set foldmethod=indent
set foldnestmax=2
set foldcolumn=1
set foldignore=
nnoremap <space> za
""""""""""""""""""""""""""""""""""""""""""
"set for vimdiff                         "
""""""""""""""""""""""""""""""""""""""""""
command! Difft windo diffthis
command! Diffo windo diffoff
""""""""""""""""""""""""""""""""""""""""""
"set for toggle number                   "
""""""""""""""""""""""""""""""""""""""""""
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc
nnoremap <F3> :call NumberToggle()<cr>
""""""""""""""""""""""""""""""""""""""""""
"set for hightlighting f and t word      "
""""""""""""""""""""""""""""""""""""""""""
function! HighlightFSearches(cmd)
    " Get extra character for the command.
    let char = nr2char(getchar())

    if char ==# ''
        " Skip special keys: arrows, backspace...
        return ''
    endif

    " Highlight 'char' on the current line.
    let match_str = 'match Visual "\%' . line('.') . 'l' . char . '"'
    execute match_str

    " Finally, execute the original command with char appended to it
    return a:cmd.char
endfunction
hi Visual cterm=reverse ctermbg=none ctermfg=none 
" highlight searches using 'f'
nnoremap <expr> f HighlightFSearches('f')
nnoremap f<bs> <nop>
vnoremap <expr> f HighlightFSearches('f')
vnoremap f<bs> <nop>

" highlight searches using 'F'
nnoremap <expr> F HighlightFSearches('F')
nnoremap F<bs> <nop>
vnoremap <expr> F HighlightFSearches('F')
vnoremap F<bs> <nop>
""""""""""""""""""""""""""""""""""""""""""
" Nerdcommenter                          "
""""""""""""""""""""""""""""""""""""""""""
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code
" indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" Allow commenting and inverting empty lines (useful when commenting a
" region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
 let g:NERDTrimTrailingWhitespace = 1
" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1
map <C-_> <leader>c<space>
""""""""""""""""""""""""""""""""""""""""""
" Nerdtree                               "
""""""""""""""""""""""""""""""""""""""""""
autocmd vimenter * silent NERDTree Home| wincmd p 
autocmd FileType nerdtree setlocal nocursorcolumn nocursorline
map <C-t> : silent call ToggleNerdTree()<CR>
function ToggleNerdTree()
  NERDTreeTabsToggle
  wincmd W
  NERDTreeTabsFind
  echo "Toggle Nerd Tree.(NERDTreeTabsToggle, NERDTreeTabsFind)"
endfunction
nnoremap <silent> <C-d> :NERDTreeTabsFind <CR>
let NERDTreeShowBookmarks=1
let g:NERDTreeWinSize=20
let g:nerdtree_tabs_open_on_console_startup=1
let g:nerdtree_tabs_autofind=1
""""""""""""""""""""""""""""""""""""""""""
" Nerdtree Directory Highlighting        "
""""""""""""""""""""""""""""""""""""""""""
hi Directory cterm=bold ctermfg=Magenta
""""""""""""""""""""""""""""""""""""""""""
" NERDTree File Highlighting             "
""""""""""""""""""""""""""""""""""""""""""
let g:NERDTreeHighlightFolders = 1 " enables folder icon highlighting using exact match
let g:NERDTreeHighlightFoldersFullName = 1 " highlights the folder name
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1
""""""""""""""""""""""""""""""""""""""""""
" Syntastic                              "
""""""""""""""""""""""""""""""""""""""""""
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_cpp_checkers=[]
let g:syntastic_python_checkers=['pyflakes']
let g:syntastic_python_pyflakes_exec ='pyflakes3'
let g:syntastic_tex_checkers=[]
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_loc_list_height= 2
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
""""""""""""""""""""""""""""""""""""""""""
" Super Tab                              "
""""""""""""""""""""""""""""""""""""""""""
let g:SuperTabDefaultCompletionType = '<C-n>'
""""""""""""""""""""""""""""""""""""""""""
" Tagbar                                 "
""""""""""""""""""""""""""""""""""""""""""
nmap <F12> :TagbarToggle<CR>
let g:tagbar_width=30
""""""""""""""""""""""""""""""""""""""""""
" ultisnips                              "
""""""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsExpandTrigger = "<enter>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
""""""""""""""""""""""""""""""""""""""""""
" Airline                                "
""""""""""""""""""""""""""""""""""""""""""
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline_theme='molokai'
""""""""""""""""""""""""""""""""""""""""""
" Airline tabline                        "
""""""""""""""""""""""""""""""""""""""""""
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
""""""""""""""""""""""""""""""""""""""""""
" Cpp syntax                             "
""""""""""""""""""""""""""""""""""""""""""
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_experimental_template_highlight = 1
""""""""""""""""""""""""""""""""""""""""""
" easy-align                             "
""""""""""""""""""""""""""""""""""""""""""
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
""""""""""""""""""""""""""""""""""""""""""
" easymotion                             "
""""""""""""""""""""""""""""""""""""""""""
map <C-u> <Plug>(easymotion-bd-w)
nmap <C-u> <Plug>(easymotion-overwin-w)
" map  f <Plug>(easymotion-bd-f)
" nmap f <Plug>(easymotion-overwin-f)
" nmap s <Plug>(easymotion-overwin-f2)
" map <Leader>L <Plug>(easymotion-bd-jk)
" nmap <Leader>L <Plug>(easymotion-overwin-line)
""""""""""""""""""""""""""""""""""""""""""
" Fugitive                               "
""""""""""""""""""""""""""""""""""""""""""
set diffopt+=vertical
""""""""""""""""""""""""""""""""""""""""""
" Gutentags                              "
""""""""""""""""""""""""""""""""""""""""""
nnoremap <leader>f <C-]>
nnoremap <leader>t <C-t>
""""""""""""""""""""""""""""""""""""""""""
" Vimtex                                 "
""""""""""""""""""""""""""""""""""""""""""
let g:tex_flavor='pdflatex'
let g:vimtex_compiler_latexmk = {
    \ 'options' : [
    \    '-shell-escape',
    \    '-verbose',
    \    '-file-line-error',
    \    '-synctex=1',
    \    '-interaction=nonstopmode',
    \ ],
    \}
let g:vimtex_view_method = 'zathura'
let g:vimtex_syntax_conceal_disable = 1
let g:vimtex_compiler_method = 'latexmk'
""""""""""""""""""""""""""""""""""""""""""
" Vim visual multi                       "
""""""""""""""""""""""""""""""""""""""""""
let g:VM_maps = {}
let g:VM_maps['Find Under']                 = ''
let g:VM_maps["Add Cursor At Pos"]          = '<C-c>'
let g:VM_maps["Add Cursor Down"]            = '<F7>'
let g:VM_maps["Add Cursor Up"]              = '<F8>'
""""""""""""""""""""""""""""""""""""""""""
" YCM                                    "
""""""""""""""""""""""""""""""""""""""""""
set completeopt-=preview
let g:ycm_show_diagnostics_ui = 0
let g:ycm_enable_diagnostic_signs = 0
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_echo_current_diagnostic = 0
let g:ycm_auto_hover=''
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/youcompleteme/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
""""""""""""""""""""""""""""""""""""""""""
" Ctrl p                                 "
""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_map = '<c-\>'
""""""""""""""""""""""""""""""""""""""""""
" undotree                               "
""""""""""""""""""""""""""""""""""""""""""
nnoremap <F9> :UndotreeToggle<CR>
